#计算机科学精粹--学习解决计算问题的艺术

朋友是我们为自己选择的家庭。这本书献给我的朋友们 -- Romulo, Leo, Moto 和 Chris, 在他们的不断推动下，"我才完成了这本该死的书"。

>我知道二二得四——我也会很高兴能证明它，如果可以——但是我还是得说如果通过某个过程我可以让2加2变成5，会给我带来更大的乐趣。 —— 拜伦男爵

*1813年 给他将来的妻子 Annabella 的信。*
*他们的女儿 Ada Lovelace 是第一个程序员。*
 
 


##前言
> 这个国家的每个人都应该学习如何在电脑上编程没因为它教会你如何思考。      ——史蒂夫乔布斯

随着计算机以前所未有的力量改变世界，一门新的科学兴起了："计算机科学"，它展现了计算机如何被用来解决问题，使我们能发挥出机器最大的潜力，收获惊人的成就。
计算机科学无处不在，但它仍然被当做无聊的理论来教学，许多程序员甚至没有学过！然而，计算机科学对于有效率地编程至关重要。我的一些朋友招不到一个好的程序员，计算机的力量很强大，但是能好好使用这种力量的人却很稀缺。
这是我通过推动"你们"高效地使用计算机来帮助这个世界的一个小尝试，本书以简明扼要的方式介绍计算机概念，我会把学术性控制在最低限度。希望计算机科学将会深入你心，并提高你的代码质量。

>  A: You know this metal rectangle full of little lights?
 A: 看到这个充满小灯泡的金属矩形了吗？
 B: Yeah.
B:嗯。

>A: I spend most of my life pressing buttons to make the pattern of lights change however I want.
A:我生活中大部分时间都在通过按这些按钮来使这些灯光形成的图案按照我的想法来改变。
B: Sounds good.
B:听起来还不错。

> A: But today, the pattern of lights is all wrong!
A:但是今天，灯光形成的图案完全错了！
B: Oh god! Try pressing more buttons!
B:天啊！赶快试试多按几下按钮！
A: It's no helping!
 A:没用的！

图1 "电脑问题", 感谢 http://xkcd.com


 
###这本书适合我吗？
如果你想高效地解决问题，这本书就是为你准备的，只需要一点点编程经验。如果你已经写过一些代码，并且认识`for`和`while`等基本编程语句，那一定没问题。如果没有写过，网上的编程教程肯定可以满足需求的。你可以一周学习一个课程，免费的。对于学习计算机科学的人来说，这本书是对知识的一个很好的回顾和巩固。

###但是计算机科学不是仅仅用于学术研究吗？
这本书适合所有人，它是关于"计算思维"的。你将学会把问题转化为可计算的系统，你将在日常问题上使用计算思维。预取和缓存将会简化你的打包，并发会加快你的烹饪。另外，你的代码也将会更美观。😉

愿原力与你同在,
Wlad
 
##第1章 基础
> 计算机科学不是关于机器，就像天文学不是关于望远镜一样。数学和计算机科学是一个重要的统一体。 ——  Edsger Dijkstra

**计算机需要我们**把问题分解成能处理的块。要做到这一点，我们需要用到一些数学。不要慌，这不是火箭科学--写好代码很少需要复杂的方程。本章只是一个解决问题的工具箱。你将会学会：
💡 将**想法**建模为流程图和伪代码，
✔️通过**逻辑**判断真假，
💯**计数**，
🎲安全地计算**概率**。

有了这个，你将会拥有将你的想法转化为可计算的解决方案的能力。

###1.1	想法
当你处理一个复杂的任务时，将你的大脑集中于它的工作：将所有重要的东西记在纸上。我们大脑工作中的记忆很容易因为过多的事实和想法而溢出，写下所有的东西是很多组织的方法的一部分，有好几种方法可以做到这一点。首先我们将会看到如何用流程图来表示流程，然后我们将会学习如何使用伪代码来编写可编程的流程，我们还会尝试用数学来对一个简单地问题建模。
####流程图
维客（译者注：维基百科的维护人员）们在讨论他们的协作的过程时，他们会创建一个随着辨论的进展而更新的流程图。我们来看看这样的帮助他们讨论的流程图：

````flow
st=>start: 页面的上一个状态
e=>end: 新的页面状态
op1=>operation: 编辑页面
op2=>operation: 与另一个编辑者讨论这个问题

cond1=>condition: 你的编辑是否被其他人修改过？
cond2=>condition: 你接受这个修改吗？
cond3=>condition: 你同意另一个编辑者吗？

st->op1->cond1
cond1(yes)->cond2
cond1(no)->e
cond2(yes)->e
cond2(no)->op2->cond3
cond3(yes)->op1
cond3(no)->op2
````

**图1.1** 维基编辑过程（改编自 http://wikipedia.org）

像上面的编辑的过程一样，计算机代码本质上就是一个过程，程序员经常使用流程图来记录计算过程。这样做的时候，为了让其他人能理解你的流程图，你应该遵循以下原则（有一个描述如何绘制软件系统图的ISO标准，叫做**UML**: http://code.energy/UML）：
* 把状态和指令步骤写在矩形中。
* 把流程会产生分支的决策步骤写在菱形中。
* 切勿将指令步骤和决策步骤混淆。
* 用箭头连接相连的步骤。
* 标记流程的开始和结束。


让我们通过找出三个数中最大的数，来看看它是如何工作的：

````flow
st=>start: 开始
e=>end: 结束
read=>operation: 读取数据A, B, C
printA=>operation: 打印A
printB=>operation: 打印B
printC=>operation: 打印C

cond1=>condition: A > B?
cond2=>condition: B > C? 
cond3=>condition: A > C?

st->read->cond1
cond1(yes)->cond3
cond1(no)->cond2
cond2(yes)->printB->e
cond2(no)->printC->e
cond3(yes)->printC->e
cond3(no)->printC->e
````

**图1.2** 找到三个变量中的最大值

####伪代码
就像流程图一样，**伪代码**表示计算过程。伪代码是人类友好的代码，却不能被机器理解。以下示例和图1.2相同。花点时间，用一些*A*、*B*和*C*的值来测试一下(这里，← 是赋值运算符，x ← 1 读作 x 被赋值为1.)：
```
原书P3代码
```


注意到这个例子完全忽略了编程语言的语法规则了吗？在你编写伪代码时，你甚至可以抛出一些口语！正如你使用流程图来编写一般的思维导图一样，编写伪代码让你的创造力自由流露吧（图1.3😄）！


> Usage of pseudocode in real life
伪代码在现实生活中的应用
Describing an algorithm
描述算法
A tool that freshman computer science students that just started to learn programming use to express their dumb actions
刚刚学习编程的计算机科学专业新生用来表达他们愚蠢的行为的工具

图1.3 "生活中的伪代码"，感谢 http://ctp200.com

####数学建模
**模型**是一组表现问题及其特征的概念，它使我们更好地理解和解决问题。在学校就会学到建模的重要性，高中数学就是（或者应该是）关于将问题建模为数字和方程，并应用工具来解决它们的一门学科。
数学描述的模型具有很大的优势：它们可以用于使用了完备的数学技术的计算机。如果你的模型有图，使用图论；如果有方程，则使用代数。它会站在创造这些工具的巨人们的肩上。让我们看看一个典型的高中问题：
>家畜围栏：🐂  你的农场有两种牲畜，你有100单位的铁丝网为动物们做一个长方形的围栏，用直线分割它们。为了使牧场的面积最大，你将如何设计围栏？

从将要解决的问题入手，设 w 和 l 为牧场的宽和长； 面积为 w ×  l。面积最大意味着用完所有的铁丝网，所以我们将 w 和 l 通过100关联起来。
A = w ×  l,
100 = 2w + 3l。
求得的 w 和 l  就可以使面积 A 最大。
将第二个等式( l = (100 - 2w) / 3)代入第一个等式，
$A = \frac{100}{3}w - \frac{2}{3}w^2$

这是一个二次方程！用高中学过的“二次公式”可以很容易地找到它的最大值。二次方程对你的重要性就像高压锅之余厨子一样，它们都可以节省时间。二次方程帮助我们更快地解决很多问题。请记住，你的职责就是解决问题。厨子了解他们的工具，你也应该了解你的工具。你需要数学建模，同时你也需要逻辑。

###1.2	逻辑
程序员工作中用到太多逻辑了以至于影响到了他们的思维模式。尽管如此，很多程序员并没有学过逻辑，却在无意识中使用了它。通过正式地学习逻辑，我们可以有意识地用它来解决问题。

>Programmer's life
程序员的生活：
A:Man, I'll never understand the women.
A:老兄，我永远不能理解女人。
B:Nobody will...But why are you saying this?
B:没有人能理解…但你为什么突然这样说？
A: My wife asked me to go to the market and said: "Bring 6 eggs, if there are potatoes, bring 9.""
A:我老婆让我去菜市场，并对我说："带6个鸡蛋，如果有土豆，带9个。"
A: There were potatoes, but she got mad when I arrived only with the 9 eggs...
A:有土豆，但是我只带了9个鸡蛋回家的时候，她很生气。
B:Go figure...
B:去搞清楚…

图 1.4 "程序员的逻辑"，感谢http://programmers.life.


我们将使用特殊的运算符和特殊的代数来学习逻辑语句，然后，我们将学习用真值表来解决问题，了解计算机是如何依赖逻辑的。

####运算符
在通常的数学中，变量和运算符（+、×、-…）用于模拟数值问题。在数理逻辑中，变量和运算符表示事物的正确性。它们不表示数字，而表示 **True/False**。
例如，"*如果泳池很温暖，我就去游泳。*"这个表达式的正确性是基于两件事情的正确性，可以将它们映射为**逻辑变量** A 和 B:
A: 泳池很温暖。
B:我去游泳。

它们要么为**True**，要么为**False**(在模糊逻辑中，值可以折中，但不在本书的讨论范围之内)，A =** True **表示游泳池是温暖的， B = **False** 表示不去游泳。B不可能为"半真半假"，因为我不可能只游一半。变量之间的依赖关系用条件运算符→ 来表示。 A → B 表示 A = **True** 蕴含 B = **True**:
 A → B: 如果泳池很温暖，我就去游泳。
用更多的运算符可以表达不同的描述，我们用否定运算符!来表示否定，!A和A相反：
!A: 泳池很冷。
!B: 我不游泳。
#####逆否 
已知 A →  B和我不游泳，那么我们可以推出游泳池是怎样的？游泳池温暖一定会游泳，那么不游泳的话，游泳池不可能温暖。每个条件表达式都有一个等价的**逆否**命题：
对于任意两个变量 A 和 B, A -> B 和 !B -> !A 等价。

另一个例子："如果你写不出好代码，你还没有读过这本书。" 它的逆否命题就是"如果你读过这本书，你就可以写出好代码。"两句话表达方式不一样，但都表达了相同的意思（顺便说一句，😎它们都为真）。
	
#####等价
 请注意，说"*如果泳池很温暖，我就去游泳。*"并不意味着我只在温水中游泳。这句话没有任何关于冷水池的描述。换句话说， A → B并不意味着 B → A。要表达双向条件，应该用**等价**：
A ↔︎ B: 当且仅当游泳池很温暖，我去游泳。

在这里，游泳池温暖和我去游泳等价：知道泳池的温度就知道我是否会去游泳，反之亦然。同样地，要注意**逆命题的错误**：永远不要因为 A-> B 而假定 B->A。

#####与、或、异或 
这些逻辑运算符是最著名的，因为它们在代码中经常显式地用到。**AND** 表示所有的描述都是**True**;  **OR** 表示任意描述是**True**;  **XOR** 表示描述的真实性是是相反的。想象一场提供伏特加和葡萄酒的派对：
A: 你喝了葡萄酒。🍷
B: 你喝了伏特加。🍸
A **OR** B: 你喝了酒。🎉
A  **AND**  B: 你喝了混合酒。😰
A  **XOR** B: 你没有喝混合酒。😇

确保你了解我们目前看到的运算符的工作方式，下表列出了两个变量的所有可能组合。请注意如何推出 A →  B 等价于 !A **OR**  B 和 A **XOR** B 等价于 !(A ↔︎ B)。

**表 1.1** 对 A 和 B 的4种可能的取值的逻辑运算。
> 原书P8 Table 1.1

####布尔代数（在George Boole 1854年出版的书（译者注：《逻辑的数学分析》）引入逻辑和数学后，开始有了布尔代数。）
就像初等代数简化了算术表达式，**布尔代数**简化了逻辑表达式。

#####结合律 
括号与** AND **或 **OR **的顺序无关，就像初等代数中的加法和乘法一样，它们也可以按任意顺序进行计算。

A **AND** (B **AND** C) = (A **AND** B) **AND** C。
A **OR** (B **OR** C) = (A **OR** B) **OR** C。

#####分配律 
在初等代数中，我们把和的乘法分解为：a × (b + c) = (a × b) + (a × c)。同样地，在逻辑运算中，**OR** 之后 的 **AND** 等价于 **OR** 的结果再 **AND** ，反之亦然：
A **AND**  (B **OR** C) = (A **AND** B) **OR** (A **AND** C)。
A **OR** (B **AND** C) = (A **OR** B) **AND** (A **OR** C)。

#####德摩根定律(德摩根和布尔是朋友，他是 Ada Lovelace 的老师，Ada 在第一台电脑出现前一个世纪，成为了第一个程序员。) 
不能同时为夏天和冬天，所以*要么不为*夏天，*要么不为*冬天。不是冬天也不是夏天*当且仅当*不为冬天和夏天之一。根据这个推理过程，**AND** 可以转化为 **OR**，反之亦然：
! (A **AND** B) = !A **OR** !B
!A **AND** !B = !(A **OR** B)

这些规则可以用来转换逻辑模型，显示属性，简化表达式，我们来解决一个问题：

> 发热的服务器：💥 如果服务器在空调关闭时过热，服务器会崩溃。如果服务器过热时，机箱冷却器出故障，也会崩溃。服务器在哪些情况下会正常工作？

使用逻辑表达式对其建模，服务器崩溃的条件可以用单个表达式来表示：

A: 服务器过热。
B: 空调关闭。
C:机箱冷却器出故障。
D:服务器崩溃。

(A **AND** B) **OR** (A ** AND** C) → D.
使用分配律，我们对表达式进行合并：
A **AND**  (B **OR** C) → D。
服务器在(!D)时正常工作，逆否命题为：
!D → !(A **AND** (B **OR** C))。
我们使用德摩根定律去掉括号：
!D → !A **OR**  !(B **OR** C).
再次使用德摩根定律：
!D → !A **OR**  (!B **AND**  !C)。

这个表达式告诉我们，只要服务器正常工作，要么 !A （服务器没有过热），要么 !B **AND** !C (空调和机箱散热器都正常工作)。
